name: "CI Workflow"

on:
  pull_request:
    branches:
      - "main"
      - "develop"
  push:
    branches:
      - "main"
      - "develop"

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to GitHub packages
        run: echo "${{ secrets.TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Pull images
        run: |
          docker-compose -f docker-compose.yml -p buildadoc-dev up -d --build buildadoc-dev

      - name: Check code
        run: |
          # Run composer
          docker-compose -f docker-compose.yml -p buildadoc-dev exec -T buildadoc-dev sh -c "composer install"
          docker-compose -f docker-compose.yml -p buildadoc-dev exec -T buildadoc-dev sh -c "composer install -d tools/psalm"
          docker-compose -f docker-compose.yml -p buildadoc-dev exec -T buildadoc-dev sh -c "composer install -d tools/php-cs-fixer"
          docker-compose -f docker-compose.yml -p buildadoc-dev exec -T buildadoc-dev sh -c "composer install -d tools/php_codesniffer"
          docker-compose -f docker-compose.yml -p buildadoc-dev exec -T buildadoc-dev sh -c "composer install -d tools/phpmd"
          
          # Run PHP-CS-Fixer
          csFixerExitCode=$(docker-compose -f docker-compose.yml -p buildadoc-dev exec -T buildadoc-dev sh -c "scripts/analysis/csfixer.sh dry-run"; echo $?)
          
          # Run Psalm
          psalmExitCode=$(docker-compose -f docker-compose.yml -p buildadoc-dev exec -T buildadoc-dev sh -c "scripts/analysis/psalm.sh"; echo $?)

          # Run CodeSniffer
          codesnifferExitCode=$(docker-compose -f docker-compose.yml -p buildadoc-dev exec -T buildadoc-dev sh -c "./scripts/analysis/codesniffer.sh"; echo $?)
          
           # Run Mess Detector
          messdetectorExitCode=$(docker-compose -f docker-compose.yml -p buildadoc-dev exec -T buildadoc-dev sh -c "./scripts/analysis/messdetector.sh"; echo $?)
          
          if [[ $psalmExitCode -ne 0 || $csFixerExitCode -ne 0 || $codesnifferExitCode -ne 0  || $messdetectorExitCode -ne 0 ]]; then
            mkdir -p artifacts

            if [[ $csFixerExitCode -ne 0 ]]; then
              docker cp buildadoc-dev_container:/var/www/html/BuildADoc/bin/output/phpcsfixer-report.log artifacts      
            fi
          
            if [[ $psalmExitCode -ne 0 ]]; then
              docker cp buildadoc-dev_container:/var/www/html/BuildADoc/bin/output/psalm-report.log artifacts       
            fi
          
            if [[ $codesnifferExitCode -ne 0 ]]; then
              docker cp buildadoc-dev_container:/var/www/html/BuildADoc/bin/output/phpcs-report.log artifacts            
            fi

             if [[ $messdetectorExitCode -ne 0 ]]; then
              docker cp buildadoc-dev_container:/var/www/html/BuildADoc/bin/output/phpmd-report.log artifacts    
            fi
            exit 0
          fi
          exit 0
        if: always()

      - name: Upload artifacts from code check
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: failures
          path: ./artifacts

      - name: Run unit tests
        run: |
          mkdir -p artifacts
          docker-compose -f docker-compose.yml -p buildadoc-dev exec -T buildadoc-dev sh -c "./scripts/test/phpunit.sh coverage"
          docker cp buildadoc-dev_container:/var/www/html/BuildADoc/bin/output/unit/junit.xml artifacts
        if: always()

      - name: Upload artifacts from unit tests
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: failures
          path: ./artifacts

      - name: Run mutation tests with msi score
        run: |
          docker-compose -f docker-compose.yml -p buildadoc-dev exec -it buildadoc-dev ./scripts/test/infectionPHP.sh

      - name: Check if Code Coverage and Mutation Score improved
        run: |
          # Get the previous coverage and mutation score
          previous_coverage=$(cat previous_coverage.txt)
          previous_mutation_score=$(cat previous_mutation_score.txt)

          # Get the current coverage and mutation score
          current_coverage=$(grep lines-total coverage.xml | sed -E 's/.*>([0-9]+)%<.*/\1/')
          current_mutation_score=$(grep 'MSI for the codebase is' infection-log.txt | sed -E 's/.*is ([0-9]+)%/\1/')

          # Check if coverage or mutation score got worse
          if [ $current_coverage -lt $previous_coverage ] || [ $current_mutation_score -lt $previous_mutation_score ]; then
            echo "Code coverage or mutation score got worse."
            exit 1
          fi

      - name: Save Current Code Coverage and Mutation Score
        run: |
          # Save the current coverage and mutation score for the next run
          grep lines-total coverage.xml | sed -E 's/.*>([0-9]+)%<.*/\1/' > previous_coverage.txt
          grep 'MSI for the codebase is' infection-log.txt | sed -E 's/.*is ([0-9]+)%/\1/' > previous_mutation_score.txt

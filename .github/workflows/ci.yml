name: "CI Workflow"

on:
  pull_request:
    branches:
      - "main"
      - "develop"
  push:
    branches:
      - "main"
      - "develop"

jobs:
  run-ci:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to GitHub packages
        run: echo "${{ secrets.TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Pull images
        run: |
          docker-compose -f docker-compose.yml -p buildadoc-dev up -d --build buildadoc-dev

      - name: Run composer
        run: |
          docker-compose -f docker-compose.yml -p buildadoc-dev exec -T buildadoc-dev sh -c "composer install"
          docker-compose -f docker-compose.yml -p buildadoc-dev exec -T buildadoc-dev sh -c "composer install -d tools/psalm"
          docker-compose -f docker-compose.yml -p buildadoc-dev exec -T buildadoc-dev sh -c "composer install -d tools/php-cs-fixer"
          docker-compose -f docker-compose.yml -p buildadoc-dev exec -T buildadoc-dev sh -c "composer install -d tools/php_codesniffer"
          docker-compose -f docker-compose.yml -p buildadoc-dev exec -T buildadoc-dev sh -c "composer install -d tools/phpmd"

      - name: Run unit tests
        id: unit-tests
        if: always()
        run: |
          mkdir -p artifacts/unit
          docker-compose -f docker-compose.yml -p buildadoc-dev exec -T buildadoc-dev sh -c "XDEBUG_MODE=coverage ./scripts/test/phpunit.sh run" > artifacts/unit/phpunit.log
          docker cp buildadoc-dev_container:/var/www/html/BuildADoc/bin/output/unit/junit.xml artifacts/unit
          docker cp buildadoc-dev_container:/var/www/html/BuildADoc/bin/output/unit/coverage.xml artifacts/unit
          docker cp buildadoc-dev_container:/var/www/html/BuildADoc/bin/output/unit/coverage.txt artifacts/unit
          docker cp buildadoc-dev_container:/var/www/html/BuildADoc/bin/output/unit/coverage artifacts/unit
          docker cp buildadoc-dev_container:/var/www/html/BuildADoc/bin/output/unit/coverage-xml artifacts/unit

      - name: Upload artifacts from unit tests
        id: upload-unit-artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-artifacts
          path: ./artifacts/unit

      - name: Run mutation tests
        run: |
          mkdir -p artifacts/mutation
          docker-compose -f docker-compose.yml -p buildadoc-dev exec -T buildadoc-dev sh -c "XDEBUG_MODE=coverage ./scripts/test/infectionPHP.sh"
          docker cp buildadoc-dev_container:/var/www/html/BuildADoc/bin/output/mutation/infection.log artifacts/mutation
          docker cp buildadoc-dev_container:/var/www/html/BuildADoc/bin/output/mutation/infection.html artifacts/mutation
          docker cp buildadoc-dev_container:/var/www/html/BuildADoc/bin/output/mutation/summary.log artifacts/mutation

      - name: Upload artifacts from mutation tests
        uses: actions/upload-artifact@v4
        with:
          name: mutation-test-artifacts
          path: ./artifacts/mutation

      - name: Check if Code Coverage and Mutation Score improved
        run: |
          
          # Get the previous coverage and mutation score
          previous_coverage=$(grep -oP '(?<=Code_Coverage-)[0-9.]+' README.md | tr -d ' ')
          previous_mutation_score=$(grep -oP '(?<=Mutation_Score-)[0-9.]+' README.md | tr -d ' ')

          # Get the current coverage and mutation score
          current_coverage=$(grep -oP 'Lines:\s+\K[0-9.]+' artifacts/unit/coverage.txt | tr -d ' ')

          # Extract values from summary.log file
          total=$(grep -E 'Total' artifacts/mutation/summary.log | grep -Eo '[0-9]+')
          killed=$(grep -E 'Killed' artifacts/mutation/summary.log | grep -Eo '[0-9]+')
          
          # Calculate MSI
          current_mutation_score=$(echo "scale=4; $killed / $total * 100" | bc)
          current_mutation_score=$(printf "%.2f\n" $current_mutation_score)

          # Check if coverage or mutation score got worse
          if awk -v current_coverage="$current_coverage" -v previous_coverage="$previous_coverage" -v current_mutation_score="$current_mutation_score" -v previous_mutation_score="$previous_mutation_score" 'BEGIN{exit !(current_coverage >= previous_coverage || current_mutation_score >= previous_mutation_score)}'; then
            echo "Code coverage and mutation score improved or remained the same."
          else
            echo "Code coverage or mutation score got worse."
            echo "Code Coverage: $current_coverage und $previous_coverage"
            echo "Mutation Score: $current_mutation_score und $previous_mutation_score"
            exit 1
          fi
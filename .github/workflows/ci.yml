name: "CI"

on:
  pull_request:
    branches:
      - "main"
      - "develop"
  push:
    branches:
      - "develop"

jobs:
  run-ci:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Login to GitHub packages
        run: echo "${{ secrets.TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Pull image
        run: |
          docker compose -f res/docker/config/docker-compose.yml -p buildadoc-dev pull

      - name: Start container
        run: |
          docker compose -f res/docker/config/docker-compose.yml -p buildadoc-dev up -d

      - name: Run composer
        run: |
          docker compose -f res/docker/config/docker-compose.yml -p buildadoc-dev exec -T buildadoc-dev sh -c "composer install"
          docker compose -f res/docker/config/docker-compose.yml -p buildadoc-dev exec -T buildadoc-dev sh -c "composer install -d tools/psalm"
          docker compose -f res/docker/config/docker-compose.yml -p buildadoc-dev exec -T buildadoc-dev sh -c "composer install -d tools/php-cs-fixer"
          docker compose -f res/docker/config/docker-compose.yml -p buildadoc-dev exec -T buildadoc-dev sh -c "composer install -d tools/php_codesniffer"
          docker compose -f res/docker/config/docker-compose.yml -p buildadoc-dev exec -T buildadoc-dev sh -c "composer install -d tools/phpmd"

      - name: Check code
        run: |
          mkdir -p artifacts
          
          # Run PHP-CS-Fixer
          csfixerExitCode=$(docker compose -f res/docker/config/docker-compose.yml -p buildadoc-dev exec -T buildadoc-dev sh -c "scripts/analysis/csfixer.sh dry-run"; echo $?)
          
          # Run Psalm
          psalmExitCode=$(docker compose -f res/docker/config/docker-compose.yml -p buildadoc-dev exec -T buildadoc-dev sh -c "scripts/analysis/psalm.sh"; echo $?)

          # Run CodeSniffer
          codesnifferExitCode=$(docker compose -f res/docker/config/docker-compose.yml -p buildadoc-dev exec -T buildadoc-dev sh -c "./scripts/analysis/codesniffer.sh"; echo $?)
          
          # Run Mess Detector
          messdetectorExitCode=$(docker compose -f res/docker/config/docker-compose.yml -p buildadoc-dev exec -T buildadoc-dev sh -c "./scripts/analysis/messdetector.sh"; echo $?)
          
          if [[ $psalmExitCode -ne 0 || $messdetectorExitCode -ne 0 ]]; then
            mkdir -p artifacts
          
            if [[ $psalmExitCode -ne 0 ]]; then
              docker cp buildadoc-dev_container:/var/www/html/BuildADoc/bin/output/psalm-report.log artifacts
            fi

            if [[ $messdetectorExitCode -ne 0 ]]; then
              docker cp buildadoc-dev_container:/var/www/html/BuildADoc/bin/output/phpmd-report.log artifacts    
            fi
            exit 1
          fi
          exit 0

      - name: Upload artifacts from code check
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: code-check-artifacts
          path: ./artifacts

      - name: Run unit tests
        id: unit-tests
        if: success()
        run: |
          mkdir -p artifacts/unit
          docker compose -f res/docker/config/docker-compose.yml -p buildadoc-dev exec -T buildadoc-dev sh -c "XDEBUG_MODE=coverage ./scripts/test/phpunit.sh run" > artifacts/unit/phpunit.log
          docker cp buildadoc-dev_container:/var/www/html/BuildADoc/bin/output/unit/junit.xml artifacts/unit
          docker cp buildadoc-dev_container:/var/www/html/BuildADoc/bin/output/unit/coverage.xml artifacts/unit
          docker cp buildadoc-dev_container:/var/www/html/BuildADoc/bin/output/unit/coverage.txt artifacts/unit
          docker cp buildadoc-dev_container:/var/www/html/BuildADoc/bin/output/unit/coverage artifacts/unit
          docker cp buildadoc-dev_container:/var/www/html/BuildADoc/bin/output/unit/coverage-xml artifacts/unit

      - name: Upload artifacts from unit tests
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-artifacts
          path: ./artifacts/unit

      - name: Run mutation tests
        run: |
          git fetch --all
          git checkout -b main origin/main
          docker cp .git buildadoc-dev_container:/var/www/html/BuildADoc
          docker compose -f res/docker/config/docker-compose.yml -p buildadoc-dev exec -T buildadoc-dev sh -c "chown -R root:root .git"
          docker compose -f res/docker/config/docker-compose.yml -p buildadoc-dev exec -T buildadoc-dev sh -c "XDEBUG_MODE=coverage ./scripts/test/infectionPHPMinMSI.sh"
          
          mkdir -p artifacts/mutation

          if docker compose -f res/docker/config/docker-compose.yml -p buildadoc-dev exec -T buildadoc-dev sh -c "test -f /var/www/html/BuildADoc/bin/output/mutation/infection.log"; then
            docker cp buildadoc-dev_container:/var/www/html/BuildADoc/bin/output/mutation/infection.log artifacts/mutation
          fi
          
          if docker compose -f res/docker/config/docker-compose.yml -p buildadoc-dev exec -T buildadoc-dev sh -c "test -f /var/www/html/BuildADoc/bin/output/mutation/infection.html"; then
            docker cp buildadoc-dev_container:/var/www/html/BuildADoc/bin/output/mutation/infection.html artifacts/mutation
          fi
          
          if docker compose -f res/docker/config/docker-compose.yml -p buildadoc-dev exec -T buildadoc-dev sh -c "test -f /var/www/html/BuildADoc/bin/output/mutation/summary.log"; then
            docker cp buildadoc-dev_container:/var/www/html/BuildADoc/bin/output/mutation/summary.log artifacts/mutation
          fi

      - name: Upload artifacts from mutation tests
        uses: actions/upload-artifact@v4
        with:
          name: mutation-test-artifacts
          path: ./artifacts/mutation

      - name: Stop container
        if: always()
        run: |
          docker compose -f res/docker/config/docker-compose.yml -p buildadoc-dev down
<?xml version="1.0" encoding="UTF-8"?>
<ruleset name="pcsg-generated-ruleset"
         xmlns="http://pmd.sf.net/ruleset/1.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
         xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">
    <description>Created with the PHP Coding Standard Generator. http://edorian.github.com/php-coding-standard-generator/
    </description>
    <!--
        Violations of this rule usually indicate that the method is doing too much.
        Try to reduce the method size by creating helper methods and removing any copy/pasted code.
    -->
    <rule ref="rulesets/codesize.xml/ExcessiveMethodLength">
        <properties>
            <property name="minimum" value="50"/>
            <property name="ignore-whitespace" value="true"/>
        </properties>
    </rule>
    <!--
        Long Class files are indications that the class may be trying to do too much.
        Try to break it down, and reduce the size to something manageable.
    -->
    <rule ref="rulesets/codesize.xml/ExcessiveClassLength">
        <properties>
            <property name="minimum" value="500"/>
        </properties>
    </rule>
    <!--
    Long parameter lists can indicate that a new object should be created to wrap the numerous parameters.
    Basically, try to group the parameters together.
    -->
    <rule ref="rulesets/codesize.xml/ExcessiveParameterList">
        <properties>
            <property name="minimum" value="10"/>
        </properties>
    </rule>
    <!--
        A large number of public methods and attributes declared in a class can indicate.
        The class may need to be broken up as increased effort will be required to thoroughly test it.
    -->
    <rule ref="rulesets/codesize.xml/ExcessivePublicCount">
        <properties>
            <property name="minimum" value="45"/>
        </properties>
    </rule>
    <!--
        Classes that have too many fields could be redesigned to have fewer fields,
        possibly through some nested object grouping of some of the information.
        For example, a class with city/state/zip fields could instead have one Address field
    -->
    <rule ref="rulesets/codesize.xml/TooManyFields">
        <properties>
            <property name="maxfields" value="20"/>
        </properties>
    </rule>
    <!--
        A class with too many methods is probably a good suspect for refactoring,
        in order to reduce its complexity and find a way to have more fine grained objects.
    -->
    <rule ref="rulesets/codesize.xml/TooManyMethods">
        <properties>
            <property name="maxmethods" value="20"/>
        </properties>
    </rule>
    <!--
        The WMC of a class is a good indicator of how much time and effort is required to modify and maintain this class.
        A large number of methods also means that this class has a greater potential impact on derived classes.
    -->
    <rule ref="rulesets/codesize.xml/ExcessiveClassComplexity">
        <properties>
            <property name="maximum" value="50"/>
        </properties>
    </rule>
    <!--
        This ruleset includes:
        Superglobals, CamelCaseClassName, CamelCasePropertyName,
        CamelCaseMethodName, CamelCaseParameterName, CamelCaseVariableName
    -->
    <rule ref="rulesets/controversial.xml"/>
    <!--
        An exit-expression within regular code is untestable and therefore it should be avoided.
        Consider to move the exit-expression into some kind of startup script where an error/exception code is returned to the calling environment.
    -->
    <rule ref="rulesets/design.xml/ExitExpression"/>
    <!--
        An eval-expression is untestable, a security risk and bad practice.
        Therefore it should be avoided. Consider to replace the eval-expression with regular code.
    -->
    <rule ref="rulesets/design.xml/EvalExpression"/>
    <!--
        Goto makes code harder to read and it is nearly impossible to understand the control flow of
        an application that uses this language construct. Therefore it should be avoided.
        Consider to replace Goto with regular control structures and separate methods/function, which are easier to read.
    -->
    <rule ref="rulesets/design.xml/GotoStatement"/>
    <!--
        A class with an excessive number of children is an indicator for an unbalanced class hierarchy.
        You should consider to refactor this class hierarchy.
    -->
    <rule ref="rulesets/design.xml/NumberOfChildren">
        <properties>
            <property name="minimum" value="15"/>
        </properties>
    </rule>
    <!--
        A class with many parents is an indicator for an unbalanced and wrong class hierarchy.
        You should consider to refactor this class hierarchy.
    -->
    <rule ref="rulesets/design.xml/DepthOfInheritance">
        <properties>
            <property name="minimum" value="6"/>
        </properties>
    </rule>
    <!--
        A class with to many dependencies has negative impacts on several quality aspects of a class.
        This includes quality criterias like stability, maintainability and understandability
    -->
    <rule ref="rulesets/design.xml/CouplingBetweenObjects">
        <properties>
            <property name="minimum" value="20"/>
            <property name="maximum" value="20"/>
        </properties>
    </rule>
    <!--
        A constructor method should not have the same name as the enclosing class
    -->
    <rule ref="rulesets/naming.xml/ConstructorWithNameAsEnclosingClass"/>
    <!--
        Class/Interface constant nanmes should always be defined in uppercase
    -->
    <rule ref="rulesets/naming.xml/ConstantNamingConventions"/>
    <!--
        Looks for methods named 'getX()' with 'boolean' as the return type.
        The convention is to name these methods 'isX()' or 'hasX()'.
    -->
    <rule ref="rulesets/naming.xml/BooleanGetMethodName"/>
    <!--
        This ruleset includes:
        UnusedPrivateField, UnusedLocalVariable, UnusedPrivateMethod, UnusedFormalParameter
    -->
    <rule ref="rulesets/unusedcode.xml"/>
</ruleset>
